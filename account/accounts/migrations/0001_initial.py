# Generated by Django 2.2.12 on 2020-05-05 02:50

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, validators=[django.core.validators.EmailValidator])),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('first_name', models.CharField(blank=True, default='', max_length=255)),
                ('last_name', models.CharField(blank=True, default='', max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'User',
            },
        ),
        migrations.CreateModel(
            name='AccessLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(db_index=True, max_length=254, validators=[django.core.validators.EmailValidator])),
                ('ip_address', models.GenericIPAddressField()),
                ('accessed_at', models.DateTimeField(auto_now=True)),
                ('request', models.CharField(default=None, max_length=255, null=True)),
                ('request_body', models.TextField(default=None, null=True)),
                ('access_type', models.CharField(choices=[(None, 'None'), ('authenticate', 'Authenticate'), ('logout', 'Logout')], default=None, max_length=50, null=True)),
                ('access_status', models.CharField(choices=[(None, 'None'), ('success', 'Success'), ('fail', 'Fail'), ('fail_user_not_exist', 'Fail because user does not exist'), ('fail_user_inactive', 'Fail because user is inactive')], default=None, max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Access Log',
                'verbose_name_plural': 'Access Log',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('nickname', models.CharField(blank=True, max_length=30, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('image', models.URLField(blank=True, null=True)),
                ('homepage', models.URLField(blank=True, null=True, validators=[django.core.validators.URLValidator(schemes=['http', 'https'])])),
                ('youtube', models.URLField(blank=True, null=True, validators=[django.core.validators.URLValidator(schemes=['http', 'https'])])),
                ('twitter', models.URLField(blank=True, null=True, validators=[django.core.validators.URLValidator(schemes=['http', 'https'])])),
                ('facebook', models.URLField(blank=True, null=True, validators=[django.core.validators.URLValidator(schemes=['http', 'https'])])),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profile',
            },
        ),
        migrations.CreateModel(
            name='JWTBlackList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(db_index=True, max_length=254, validators=[django.core.validators.EmailValidator])),
                ('token', models.CharField(max_length=255)),
                ('ip_address', models.GenericIPAddressField()),
                ('expire_at', models.DateTimeField(db_index=True)),
                ('accessed_at', models.DateTimeField(auto_now=True)),
                ('log_ref', models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.AccessLog')),
            ],
            options={
                'verbose_name': 'Black List',
                'verbose_name_plural': 'Black List',
            },
        ),
    ]
